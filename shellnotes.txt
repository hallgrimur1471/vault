apt-cache search ros-kinetic  #[search in apt repository]
arp -n hostname.local | awk '{x = ; gsub(/[()]/, , x);  print x }'  #[find local ip address of device by hostname]
cat file.txt | pbcopy  #[copy file contents]
catkin config --blacklist gestos  #[blacklist a package {ros, catkin}]
catkin_make --pkg beginner_tutorials  #[build only one package with catkin_make]
curl ipinfo.io/ip  #[find public ip of this computer]
dconf-editor  #[gnome uses mutter window manager, which uses dconf configuration system]
dconf-editor  #[sleep settings: navigate to org.gnome.settings-daemon.plugins.power]
df -h  #[print free space on disk {available,memory}]
du -hc --max-depth=1 ~/  #[list how much memory folders are taking {space}]
echo "command here are executed by $( whoami )"  #[put in script to know who runs commands there {command}]
echo "commands here are executed by the machine: $( uname -a )"  #[put in script to know which computer runs commands there {command, who}]
echo "This script was called by the user: $(who am i | awk '{print $1}')"  #[also works when script called with sudo {command}]
eval $(minikube docker-env -u)  #[no longer use minikube host  {docker}]
find . -name '*.js' | xargs wc -l  #[count all lines in a directory (current folder and recursive)]
find . -type f | perl -ne 'print $1 if m/\.([^.\/]+)$/' | sort | uniq -c | sort -n  #[print all types of file extensions in folder (recursively) and also displays the count of files]
find . -type f | perl -ne 'print $1 if m/\.([^.\/]+)$/' | sort -u  #[print all types of file extensions in folder (recursively)]
find | xargs wc -l  #[count all lines in a directory (current folder)]
getent hosts <HOSTNAME>.local  #[find local ip address of device by hostname]
git config user.email username@example.com  #[set email for specific repostory]
git config user.name username  #[set username for specific repostory]
git push <remote> --mirror  #[push all branches, tags and remotes to a <remote>
gnome-tweak-tool  #[edit hotkeys, desktop environment, window manager etc.]
gpg --decrypt < dir.tar.gz.gpg > dir.tar.gz && rm dir.tar.gz.gpg  #[decrypt file]
gpg --symmetric < dir.tar.gz > dir.tar.gz.gpg && rm dir.tar.gz  #[encrypt file]
ip route | grep default  #[find public network interface of this machine {ip address}]
latexmk -pdf -pvc filename.tex  #[compile .tex file on file save]
ln -s ~/symlink-test/dir/existing-file.txt ~/symlink-test/symlink-to-existing-file.txt  #[create a symbolic link {symlink}]
lsb_release -a  #[print information about operating system]
lspci -vnn | grep VGA -A 12  #[GPU info {graphics card}]
nmap -sn 192.168.1.0/24  #[Find all IP adresses in subnet range]
nmap -sn 192.168.1.0/24  #[Find all IP adresses in subnet range {network}]
nmcli dev wifi connect <NETWORK_SSID> password <NETWORK_PASSWORD>  #[connect to network]
nmcli -f NAME,UUID,AUTOCONNECT,AUTOCONNECT-PRIORITY c  #[print network connection priority]
pbcopy < file.txt  #[copy file contents]
pbpaste  #[paste file contents]
ps aux  #[list all running processes]
ps -ef | awk '{print }'  #[isolate a column using awk {print}]
ps -p1 | grep systemd && echo systemd || echo upstart  #[determine which init daemon you are currently booting with {systemd, upstart}
rsync -avz -e "ssh -p 19999 -i ~/.ssh/id_rsa" --progress /home/hallgrimur1471/bashscripts/findmysubnet.sh hallgrimur1471@localhost:~/rsync/findmysubnet.sh
rsync -avz -e ssh -p 19999 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null --progress /usr/local/bin/findipbymac hallgrimur1471@localhost:~/rsync/findipbymac  #[rsync through reverse ssh tunnel]
rsync -avz -e ssh -X --rsync-path='SUDO_ASKPASS=/usr/libexec/openssh/ssh-askpass sudo -A rsync' /home/hallgrimur1471/rsync/raspberry-mavproxy.sh pi@carputer1.local:/usr/local/bin/mavproxy.sh  #[rsync with sudo permission at remote]
ssh-copy-id username@remotehost  #[copy ssh key (id_rsa.pub file) to the remote host and append it to ~/.ssh/authorized_keys]
ssh-keygen -lf /etc/ssh/ssh_host_ecdsa_key.pub  #[check ECDSA key fingerprint of this machine {ssh,sshd,id}]
ssh-keygen -t rsa  #[generate public/private ssh-key-pair]
ssh -p 1999 hallgrimur1471@localhost  #[connect to an already set-up reverse ssh tunnel]
ssh -R 19999:localhost:22 hallgrimur1471@31.209.255.99  #[setup for reverse ssh tunnel]
subl /var/log/Xorg.0.log  #[read xorg log {GPU, graphics card}]
sudo dpkg -L PACKAGENAME  #[List all files (with location) that were brought in by a package {apt-get}]
sudo /etc/init.d/ssh restart  #[restart ssh and sshd on RPi {rpi}]
sudo lshw  #[print various information about hardware {cpu, memory, gpu}]
sudo nmcli connection modify <NETWORK_NAME> connection.autoconnect-priority 20  #[set network connection priority]
sudo python3 -m pip install pip --upgrade  #[pip version conflict fix {python}]
sudo systemctl status openvpn@server  #[status of openvpn server]
sudo tcpdump -c 10 dst host 192.168.1.114 and port 14550 -w tcpdump.dump  #[listen to incomming udp stream and write the bytes to a file]
uname -a  #[print kernel, hostname, processor and operating system information {cpu, memory, gpu}]
which terminator  #[shows location of terminator that will be run if terminator is typed into console {command, path}]
while sleep_until_modified.py ~/programming/google-test/src/; do clear; cpplint --recursive --filter=-legal/copyright,-build/header_guard,-build/include_subdir,-build/include ~/programming/google-test/src; done  #[automatic c++ linter using google style guide]
while sleep_until_modified.py ../src; do cmake .. && make && ./runUnitTests; done  #[automatic build & test using google tests]
xxd passcode.input1  [view file as hex]
